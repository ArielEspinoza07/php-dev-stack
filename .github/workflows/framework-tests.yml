name: Framework - Laravel / Symfony Test

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'src/**'
      - 'docker/**'
      - '.env*'

jobs:
  laravel-test:
    name: 📊 Test Laravel
    runs-on: ubuntu-latest

    steps:
      - name: 💾 Checkout code
        uses: actions/checkout@v4

      - name: 📂 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🛠 Prepare .env and extract PHP_VERSION
        run: |
          cp .env.example .env
          echo "PHP_VERSION=$(grep PHP_VERSION .env | cut -d '=' -f2)" >> $GITHUB_ENV

      - name: 💾 Restore build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ env.PHP_VERSION }}
          key: ${{ format('{0}-php-{1}-{2}', runner.os, env.PHP_VERSION, hashFiles(format('docker/php/{0}/Dockerfile', env.PHP_VERSION)) ) }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-

      - name: 💪 Build Docker environment (with cache)
        run: |
          docker buildx create --use
          docker buildx build \
            --tag php-dev:${{ env.PHP_VERSION }} \
            --file docker/php/${{ env.PHP_VERSION }}/Dockerfile \
            --cache-from=type=local,src=/tmp/.buildx-cache-${{ env.PHP_VERSION }} \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new-${{ env.PHP_VERSION }} \
            --load \
            .

      - name: 💾 Save updated cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache-${{ env.PHP_VERSION }}
          mv /tmp/.buildx-cache-new-${{ env.PHP_VERSION }} /tmp/.buildx-cache-${{ env.PHP_VERSION }}

      - name: 🚀 Start Laravel stack
        run: make up-mysql

      - name: 🤖 Create new Laravel App
        run: make composer-create-project project=laravel/laravel name=laravel-test

      - name: 🔧 Run Laravel Artisan about
        run: make run-php-command project=laravel-test command="artisan about"

      - name: ❌ Teardown
        run: make down

  symfony-test:
    name: 📊 Test Symfony
    runs-on: ubuntu-latest

    steps:
      - name: 💾 Checkout code
        uses: actions/checkout@v4

      - name: 📂 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🛠 Prepare .env and extract PHP_VERSION
        run: |
          cp .env.example .env
          echo "PHP_VERSION=$(grep PHP_VERSION .env | cut -d '=' -f2)" >> $GITHUB_ENV

      - name: 💾 Restore build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ env.PHP_VERSION }}
          key: ${{ format('{0}-php-{1}-{2}', runner.os, env.PHP_VERSION, hashFiles(format('docker/php/{0}/Dockerfile', env.PHP_VERSION)) ) }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-

      - name: 💪 Build Docker environment (with cache)
        run: |
          docker buildx create --use
          docker buildx build \
          --tag php-dev:${{ env.PHP_VERSION }} \
          --file docker/php/${{ env.PHP_VERSION }}/Dockerfile \
          --cache-from=type=local,src=/tmp/.buildx-cache-${{ env.PHP_VERSION }} \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new-${{ env.PHP_VERSION }} \
          --load \
          .

      - name: 💾 Save updated cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache-${{ env.PHP_VERSION }}
          mv /tmp/.buildx-cache-new-${{ env.PHP_VERSION }} /tmp/.buildx-cache-${{ env.PHP_VERSION }}

      - name: 🚀 Start Symfony stack
        run: make up-pgsql

      - name: 🤖 Create new Symfony App
        run: make composer-create-project project=symfony/skeleton name=symfony-test

      - name: 🔧 Run Symfony console about
        run: make run-php-command project=symfony-test command="bin/console about"

      - name: ❌ Teardown
        run: make down